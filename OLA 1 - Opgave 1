#### OLA 1
#### Opgave 1

# ---------------------------------------------- #
#           Indlæs nødvendige pakker             #
# ---------------------------------------------- #
library(mongolite)
library(tidyverse)
library(dplyr)
library(tidyr)
library(jsonlite)
library(shiny)
library(purrr)
library(shiny)
library(ggplot2)
library(ggsoccer)
# ---------------------------------------------- #
#           Forbindelse til MongoDB              #
# ---------------------------------------------- #

con_matches <- mongo(collection = "matches", 
                     db = "soccer", 
                     url = "mongodb://localhost")

con_players <- mongo(collection = "players", 
                     db = "soccer", 
                     url = "mongodb://localhost")

con_games <- mongo(collection = "games", 
                   db = "soccer", 
                   url = "mongodb://localhost")

con_flattened_events <- mongo(collection = "flattened_events", 
                              db = "soccer", 
                              url = "mongodb://localhost")

#Opgave 1.1
{
#1.1.1.	Query der finder RKC Waalwik hjemekampe 

#Hent alle RKC's hjemmekampe i de 2 sæsoner

RKC_matches <- con_matches$find(
  query = toJSON(list(label = list("$regex" = "^RKC Waalwijk")), auto_unbox = TRUE)
)

#1.1.2. Query der finder antal skud for den Hollandske og Polske Liga 

# antal skud for den Hollandske og Polske Liga

df_skud <- con_flattened_events$find(
  query = toJSON(list("events.type.primary" = "shot"), auto_unbox = TRUE)
)

# Udpak event-data fra kampene
testl <- df_skud$events
testdf <- bind_rows(testl)
df_skud_færdig <- fromJSON(toJSON(testdf), flatten = TRUE)


#1.1.3.	Query der finder alle skud fra angriberer i alle kampe og printer player samt shot egenskaber = isGoal og onTarget 

df_skud_egenskaber <- con_flattened_events$find(
  query = toJSON(list(
    "events.type.primary" = "shot",
    "events.player.position" = list("$in" = c("CF", "RW", "LF"))
  ), auto_unbox = TRUE),  
  fields = toJSON(list(
    "events.type.primary" = 1,
    "events.player.position" = 1,
    "events.player.name" = 1,
    "events.shot.isGoal" = 1,
    "events.shot.onTarget" = 1
  ), auto_unbox = TRUE)  #
)

df_skud_egenskaber <- df_skud_egenskaber %>%
  unnest_wider(events)

#1.1.4.	Query der finder antal spillere som er over 190 cm høj 
df_højde <- con_players$find(
  query = toJSON(list("height" = list("$gt" = 190)), auto_unbox = TRUE)
)
}

#Opgave 1.2 Afleveringer
{
  
#1.2.1.	Lav 5-10 figurer, der giver en fodboldtræner et overblik over afleveringer, herunder præcision.
# Polske liga fra sæsonstart 2021/2022 til seneste observation i sæsonen 2022/2023.

# ---------------------------------------------- #
#              Data retrieving                   #
# ---------------------------------------------- # 

allMatches <- con_matches$find(query = '{}', fields = '{}')
allPolish <- allMatches %>% filter(competitionId == "692")
polishId <- allPolish[["_id"]]
polishId_vec <- unlist(polishId)

query_fixed <- jsonlite::toJSON(
  list(
    "matchId" = list("$in" = polishId_vec),  # Brug den rene vektor
    "type.primary" = "shot"
  ), 
  auto_unbox = TRUE
)
  
test <- con_games$find(query = query, fields = '{"_id": 0}')

# ---------------------------------------------- #
#                 Data prep                      #
# ---------------------------------------------- #  


# Find de kolonner, der er lister
nested_cols <- sapply(test, is.list)

for (col in nested_cols) {
  if (col %in% names(test)) {
    message("Flader ud: ", col)  # Status i konsollen
    test <- test %>% unnest_wider(col, names_sep = "_")  #
  }
}

# Find de kolonner, der har været liser i lister
nested_cols_2 <- sapply(test, is.list)  

for (col in names(nested_cols_2[nested_cols_2 == TRUE])) {
  if (col %in% names(test)) {
    message("Flader ud igen: ", col)
    test <- test %>% unnest_wider(col, names_sep = "_")
  }
}

Afleveringer <- test

# ---------------------------------------------- #
#                 Shiny app                      #
# ---------------------------------------------- #  

library(shiny)
library(ggplot2)
library(dplyr)
library(ggExtra)

# Sample UI
ui <- fluidPage(
  titlePanel("Afleveringsanalyse - Ligaoversigt"),
  sidebarLayout(
    sidebarPanel(
      selectInput("plotType", "Vælg visualisering:", 
                  choices = c("Gennemsnitlig afleveringslængde", 
                              "Andel af præcise afleveringer i første vs. anden halvleg",
                              "Heatmap over afleveringsmodtagelser",
                              "Positioner der modtager flest afleveringer",
                              "Afleveringspræcision pr. hold - Lineær regression"))
    ),
    mainPanel(
      plotOutput("selectedPlot")
    )
  )
)

# Server logic
server <- function(input, output) {
  output$selectedPlot <- renderPlot({
    data <- Afleveringer
    
    if (input$plotType == "Gennemsnitlig afleveringslængde") {
      ggplot(data, aes(y = pass_length)) +
        geom_boxplot(fill = "steelblue") +
        theme_minimal() +
        labs(y = "Afleveringslængde (m)", title = "Gennemsnitlig afleveringslængde")
    } 
    else if (input$plotType == "Andel af præcise afleveringer i første vs. anden halvleg") {
      data %>%
        group_by(matchPeriod) %>%
        summarise(Præcision = mean(pass_accurate, na.rm = TRUE) * 100) %>%
        ggplot(aes(x = matchPeriod, y = Præcision, fill = matchPeriod)) +
        geom_bar(stat = "identity") +
        theme_minimal() +
        coord_cartesian(ylim = c(0, 100)) +
        labs(x = "Halvleg", y = "Afleveringspræcision (%)", title = "Andel af præcise afleveringer i første vs. anden halvleg")
    }
    else if (input$plotType == "Heatmap over afleveringsmodtagelser") {
      ggplot(data, aes(x = pass_endLocation_x * 1.05, y = pass_endLocation_y * 0.68)) +
        stat_density_2d(aes(fill = ..level..), geom = "polygon") +
        theme_minimal() +
        scale_fill_viridis_c() +
        labs(x = "X-position (m)", y = "Y-position (m)", title = "Heatmap over afleveringsmodtagelser")
    }
    else if (input$plotType == "Positioner der modtager flest afleveringer") {
      data %>%
        filter(!is.na(pass_recipient_position)) %>%
        group_by(pass_recipient_position) %>%
        summarise(Antal = n() / n_distinct(matchId)) %>%
        ggplot(aes(x = reorder(pass_recipient_position, Antal), y = Antal)) +
        geom_bar(stat = "identity", fill = "steelblue") +
        coord_flip() +
        theme_minimal() +
        labs(x = "Position", y = "Afleveringer pr. kamp", title = "Positioner der modtager flest afleveringer")
    }
    else if (input$plotType == "Afleveringspræcision pr. hold - Lineær regression") {
      data %>%
        group_by(possession_team_name) %>%
        summarise(Præcision = mean(pass_accurate, na.rm = TRUE) * 100) %>%
        ggplot(aes(x = possession_team_name, y = Præcision)) +
        geom_point(color = "steelblue") +
        geom_hline(yintercept = mean(data$pass_accurate, na.rm = TRUE) * 100, linetype = "dashed", color = "red") +
        theme_minimal() +
        coord_flip() +
        labs(x = "Hold", y = "Afleveringspræcision (%)", title = "Afleveringspræcision pr. hold - Lineær regression")
    }
  })
}

# Run the application
shinyApp(ui = ui, server = server)



}

#Opgave 1.3 Skud
{
# ---------------------------------------------- #
#              Data retrieving                   #
# ---------------------------------------------- #

# Hent skuddata fra MongoDB
allMatches <- con_matches$find(query = '{}', fields = '{}')
allPolish <- allMatches %>% filter(competitionId == "692")
polishId <- allPolish["_id"]
polishId_vec <- unlist(polishId)

query_fixed <- jsonlite::toJSON(
  list(
    "matchId" = list("$in" = polishId_vec),  # Brug den rene vektor
    "type.primary" = "shot"
  ), 
  auto_unbox = TRUE
)

shots <- con_games$find(query = query_fixed, fields = '{"_id": 0}')

# ---------------------------------------------- #
#                 Data prep                      #
# ---------------------------------------------- #  

# SKAL KØRES 2 OMGANGE
# Find de kolonner, der har været lister i lister
nested_cols <- sapply(shots, is.list)  

for (col in names(nested_cols[nested_cols == TRUE])) {
  if (col %in% names(shots)) {
    message("Flader ud igen: ", col)
    shots <- shots %>% unnest_wider(col, names_sep = "_")
  }
}

# ---------------------------------------------- #
#                 Shiny app                      #
# ---------------------------------------------- #  

library(shiny)
library(ggplot2)
library(dplyr)
library(ggsoccer)
library(gridExtra)

# Sample UI
ui <- fluidPage(
  titlePanel("Skudanalyse - Ligaoversigt"),
  sidebarLayout(
    sidebarPanel(
      selectInput("plotType", "Vælg visualisering:", 
                  choices = c("Skud vs. Skud på mål", 
                              "xG vs. Mål",
                              "Fordeling af skudtyper",
                              "Holdenes skudpræcision",
                              "Skud per minut i kampen"))
    ),
    mainPanel(
      plotOutput("selectedPlot"),
      textOutput("summaryText")
    )
  )
)

# Server logic
server <- function(input, output) {
  output$selectedPlot <- renderPlot({
    data <- shots
    
    if (input$plotType == "Skud vs. Skud på mål") {
      summary_data <- tibble(Kategori = c("Total Skud", "Skud på mål"),
                             Antal = c(nrow(data), sum(data$shot_onTarget, na.rm = TRUE)))
      
      ggplot(summary_data, aes(x = Kategori, y = Antal, fill = Kategori)) +
        geom_bar(stat = "identity") +
        theme_minimal() +
        labs(x = "", y = "Antal", title = "Skud vs. Skud på mål")
    }
    else if (input$plotType == "xG vs. Mål") {
      summary_data <- tibble(Kategori = c("xG", "Mål"),
                             Værdi = c(mean(data$shot_xg, na.rm = TRUE), mean(data$shot_isGoal, na.rm = TRUE)))
      
      ggplot(summary_data, aes(x = Kategori, y = Værdi, fill = Kategori)) +
        geom_bar(stat = "identity") +
        theme_minimal() +
        labs(x = "", y = "Gennemsnit", title = "xG vs. Mål")
    }
    else if (input$plotType == "Fordeling af skudtyper") {
      summary_data <- data %>% count(shot_bodyPart, name = "Antal")
      
      ggplot(summary_data, aes(x = reorder(shot_bodyPart, Antal), y = Antal, fill = shot_bodyPart)) +
        geom_bar(stat = "identity") +
        coord_flip() +
        theme_minimal() +
        labs(x = "Afslutningstype", y = "Antal skud", 
             title = "Fordeling af skudtyper")
    }
    else if (input$plotType == "Holdenes skudpræcision") {
      summary_data <- data %>%
        group_by(team_name) %>%
        summarise(Præcision = mean(shot_onTarget, na.rm = TRUE) * 100)
      
      ggplot(summary_data, aes(x = reorder(team_name, Præcision), y = Præcision, fill = Præcision)) +
        geom_bar(stat = "identity") +
        coord_flip() +
        theme_minimal() +
        labs(x = "Hold", y = "Skudpræcision (%)", 
             title = "Holdenes skudpræcision")
    }
    else if (input$plotType == "Skud per minut i kampen") {
      summary_data <- data %>%
        group_by(minute) %>%
        summarise(Antal_Skud = n())
      
      ggplot(summary_data, aes(x = minute, y = Antal_Skud)) +
        geom_line(color = "steelblue", size = 1) +
        theme_minimal() +
        labs(x = "Minut", y = "Antal skud", 
             title = "Skud per minut i kampen")
    }
  })
  
  output$summaryText <- renderText({
    data <- shots
    if (input$plotType == "Skud vs. Skud på mål") {
      avg_shots <- nrow(data)
      avg_shots_on_target <- sum(data$shot_onTarget, na.rm = TRUE)
      paste("Total skud:", avg_shots, "- Skud på mål:", avg_shots_on_target)
    }
    else if (input$plotType == "xG vs. Mål") {
      avg_goal <- mean(data$shot_isGoal, na.rm = TRUE) * 100
      avg_xg <- mean(data$shot_xg, na.rm = TRUE) * 100
      paste("Gennemsnitligt xG:", round(avg_xg, 2), "% - Gennemsnitligt antal mål:", round(avg_goal, 2), "%")
    }
    else ""
  })
}

# Run the application
shinyApp(ui = ui, server = server)

}






